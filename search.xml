<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>考研咨询政策数据挖掘</title>
      <link href="/2019/05/10/%E8%80%83%E7%A0%94%E8%B5%84%E8%AE%AF%E6%94%BF%E7%AD%96%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
      <url>/2019/05/10/%E8%80%83%E7%A0%94%E8%B5%84%E8%AE%AF%E6%94%BF%E7%AD%96%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/</url>
      
        <content type="html"><![CDATA[<p>​    近年来，考研人数不断添加，考研对于我们来说是一个热点不断的话题，对于考研资讯信息不够集中，数据量过大，考生无法准确的判断某个时期热点的资料，因此越来越多考生想能够快速得了解考研资讯、国家政策以及院校政策。</p><p>​    本项目通过对招生资讯、国家政策、院校政策进行总体数据挖掘以及分别进行数据挖掘，对院校的资讯热点进行提取绘制成词云图。</p><p>​    考生通过数据绘制出词云图，可以清楚的了解到近年来院校关注的重点是什么，以及近年来考研相关的国家政策热点，借助这些信息，能够帮助到我们广大考生进行更好选择所需要关注的热点信息，更为方便的了解到国家政策。</p><a id="more"></a><h2 id="1-研究背景及目的"><a href="#1-研究背景及目的" class="headerlink" title="1 研究背景及目的"></a>1 研究背景及目的</h2><h3 id="1-1-背景"><a href="#1-1-背景" class="headerlink" title="1.1 背景"></a>1.1 背景</h3><p>​    近年来，考研人数不断添加，考研对于我们来说是一个热点不断的话题，对于考研资讯信息不够集中，数据量过大，考生无法准确的判断某个时期热点的资料，因此越来越多考生想能够快速得了解考研资讯、国家政策以及院校政策。</p><h3 id="1-2-考研资讯政策数据资源"><a href="#1-2-考研资讯政策数据资源" class="headerlink" title="1.2 考研资讯政策数据资源"></a>1.2 考研资讯政策数据资源</h3><p>(1)<strong>数据来源</strong></p><p><a href="https://yz.chsi.com.cn/" target="_blank" rel="noopener">中国研究生招生信息网</a></p><p>(2)<strong>数据规模</strong></p><p>爬取了近 5 年的招生资讯、国家政策、院校政策，共 5600 篇文章，约 750 万字。</p><p>(3)<strong>数据特征分析</strong></p><p>文本型数据，招生资讯占比 62%，国家政策占比 4%，院校政策占比 34%。</p><h3 id="1-3-考研资讯政策数据挖掘目的和意义"><a href="#1-3-考研资讯政策数据挖掘目的和意义" class="headerlink" title="1.3 考研资讯政策数据挖掘目的和意义"></a>1.3 考研资讯政策数据挖掘目的和意义</h3><p>(1)<strong>数据挖掘的目标</strong></p><p>​    通过对招生资讯、国家政策、院校政策进行总体数据挖掘以及分别进行数据挖掘，对 院校的资讯热点进行提取绘制成词云图。</p><p>(2)<strong>实际应用价值分析</strong></p><p>​    考生通过数据绘制出词云图，可以清楚的了解到近年来院校关注的重点是什么，以及近年来考研相关的国家政策热点，借助这些信息，能够帮助到我们广大考生进行更好选择所需要关注的热点信息，更为方便的了解到国家政策。</p><h2 id="2-考研资讯政策数据挖掘系统设计"><a href="#2-考研资讯政策数据挖掘系统设计" class="headerlink" title="2 考研资讯政策数据挖掘系统设计"></a>2 考研资讯政策数据挖掘系统设计</h2><h3 id="2-1-系统总体设计"><a href="#2-1-系统总体设计" class="headerlink" title="2.1 系统总体设计"></a>2.1 系统总体设计</h3><h4 id="2-1-1-系统设计目标"><a href="#2-1-1-系统设计目标" class="headerlink" title="2.1.1 系统设计目标"></a>2.1.1 系统设计目标</h4><p>​    通过爬虫爬取信息，将信息按照规定格式进行存储，将数据读入，构建语料库，进行中文分词，再进行词频统计分析，绘制词云图和柱状图，进行保存。</p><h4 id="2-1-2-总体流程图"><a href="#2-1-2-总体流程图" class="headerlink" title="2.1.2 总体流程图"></a>2.1.2 总体流程图</h4><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/流程图.png" alt="图 2.1 总体流程图" style="zoom: 60%;" /></p><p>​    系统由爬虫子系统和数据挖掘子系统组成，流程</p><h3 id="2-2-系统功能模块设计"><a href="#2-2-系统功能模块设计" class="headerlink" title="2.2 系统功能模块设计"></a>2.2 系统功能模块设计</h3><h4 id="2-2-1-数据抓取模块设计"><a href="#2-2-1-数据抓取模块设计" class="headerlink" title="2.2.1 数据抓取模块设计"></a>2.2.1 数据抓取模块设计</h4><p>​    给予开始位置、模式，即可开始抓取到研招网的招生资讯、院校政策、国家政策</p><p>的列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">模块:requests, bs4</span><br><span class="line">函数:</span><br><span class="line">http 请求函数:requests.get(url) url:待获取网页源代码的 URL</span><br><span class="line">html 解析函数:bs4.BeautifulSoup(content,model) content:待解析的 html 文本，</span><br><span class="line">model:解释器</span><br></pre></td></tr></table></figure><h4 id="2-2-2-数据解析模块设计"><a href="#2-2-2-数据解析模块设计" class="headerlink" title="2.2.2 数据解析模块设计"></a>2.2.2 数据解析模块设计</h4><p>​    给予 url，即可开始解析网页中的文章数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">模块:requests, bs4</span><br><span class="line">函数:</span><br><span class="line">数据标签查找函数:BeautifulSoup.find(tag,id) tag:html 标签 id:过滤器</span><br></pre></td></tr></table></figure><h4 id="2-2-3-数据保存模块设计"><a href="#2-2-3-数据保存模块设计" class="headerlink" title="2.2.3 数据保存模块设计"></a>2.2.3 数据保存模块设计</h4><p>​    给予待保存数据、文件路径，将会将数据文件按格式保存在磁盘中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">模块:os</span><br><span class="line">函数:</span><br><span class="line">打开文件函数 open(path, model) path:打开的文档路径 model:打开模式(wt 为写 入模式)</span><br><span class="line">写入数据函数:f.write(article) article:待写入的数据</span><br></pre></td></tr></table></figure><h4 id="2-2-4-数据导入模块设计"><a href="#2-2-4-数据导入模块设计" class="headerlink" title="2.2.4 数据导入模块设计"></a>2.2.4 数据导入模块设计</h4><p>​    遍历文件夹，将文本数据从文件夹中取出来，并分析出出文本时间、文本类型，</p><p>返回拥有多个返回值 filePaths,fileContents,dateTimes,Species 都为 list 类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">模块:os，codecs</span><br><span class="line">函数:</span><br><span class="line">文件遍历函数:os.walk(path) path:待遍历文件路径</span><br><span class="line">读取文件函数 codecs.open(filePath,&#39;r&#39;,&#39;utf-8&#39;) 文件路径 打开模式 文件编码</span><br></pre></td></tr></table></figure><h4 id="2-2-5-构建语料库模块设计"><a href="#2-2-5-构建语料库模块设计" class="headerlink" title="2.2.5 构建语料库模块设计"></a>2.2.5 构建语料库模块设计</h4><p>​    给予数据文件夹路径，调用数据导入模块，取得文件数据，构建语料库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">模块: pandas</span><br><span class="line">函数:</span><br><span class="line">创建数据框函数:pandas.DataFrame(&#123;&#125;) 参数:字典类型</span><br></pre></td></tr></table></figure><h4 id="2-2-6-中文分词模块设计"><a href="#2-2-6-中文分词模块设计" class="headerlink" title="2.2.6 中文分词模块设计"></a>2.2.6 中文分词模块设计</h4><blockquote><p>TextRank 算法分析: 类似于 PageRank 的思想，将文本中的语法单元视作图中的 节点，如果两个语法单元存在一定语法关系，则这两个语法单元在图中就会有一条边 相互连接，通过一定的迭代次数，最终不同的节点会有不同的权重，权重高的语法单 元可以作为关键词。节点的权重不仅依赖于它的入度结点，还依赖于这些入度结点的 权重，入度结点越多，入度结点的权重越大，说明这个结点的权重越高。</p></blockquote><p>​    给予语料库，对语料库文本进行中文分词，由于数据量较大，采用多线程方式执</p><p>行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">模块: concurrent, jieba numpy</span><br><span class="line">函数:</span><br><span class="line">线程池创建函数:ThreadPoolExecutor(max_workers) max_workers: 同时进行的线</span><br><span class="line">程个数</span><br><span class="line">等待线程完成函数:wait(all_task, return_when&#x3D;ALL_COMPLETED) all_task:线程</span><br><span class="line">池句柄 return_when:等待类型 ALL_COMPLETED 全部线程执行完毕</span><br><span class="line">读取 csv 数据函数:pandas.read_csv(path, encoding, index_col) path:路径, encoding:</span><br><span class="line">编码, index_col 序列 Textran:jieba.analyse.textrank(content,topK&#x3D;50,withWeight&#x3D;False,allowPOS&#x3D;(&#39;ns&#39;, &#39;n&#39;,</span><br><span class="line">&#39;vn&#39;, &#39;v&#39;)) content:待分割的文本</span><br></pre></td></tr></table></figure><h4 id="2-2-7-词频统计模块设计"><a href="#2-2-7-词频统计模块设计" class="headerlink" title="2.2.7 词频统计模块设计"></a>2.2.7 词频统计模块设计</h4><p>​    给予中文分词数据框、过滤词频，对分词的数据进行合并统计。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">模块: pandas</span><br><span class="line">函数:</span><br><span class="line">词频合并函数:segment_dataframe.groupby(&#39;word&#39;)[&#39;count&#39;].sum() 参数(’word’):抽 取 word 字段 [&#39;count&#39;].sum() 计算 count 数据的和</span><br><span class="line">排序函数:ser_word.sort_values(ascending&#x3D;False) ascending 是否为升序 元组转换函数:zip(a,b) 打包 a,b 为元组数据</span><br></pre></td></tr></table></figure><h2 id="3-系统实现"><a href="#3-系统实现" class="headerlink" title="3 系统实现"></a>3 系统实现</h2><h3 id="3-1-数据抓取"><a href="#3-1-数据抓取" class="headerlink" title="3.1 数据抓取"></a>3.1 数据抓取</h3><blockquote><p>向服务器发送请求-&gt;编码猜测-&gt;对 html 文档进行遍历-&gt;组合成 list 数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义获取资讯列表函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_consultant_list</span><span class="params">(start, model)</span>:</span></span><br><span class="line">    <span class="comment"># 返回结果</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="comment"># 发送http请求</span></span><br><span class="line">    response = requests.get(base_url + <span class="string">"/kyzx/"</span>+model+<span class="string">"/?start="</span> + str(start))</span><br><span class="line">    <span class="comment"># 判断是否请求成功</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code != <span class="number">200</span>:</span><br><span class="line">        print(<span class="string">"get_consultant_list请求失败"</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="comment"># 设置相应数据的编码为猜测的编码</span></span><br><span class="line">    response.encoding = response.apparent_encoding</span><br><span class="line">    <span class="comment"># 使用BeautifulSoup进行煲汤 解析器为 html.parser</span></span><br><span class="line">    soup = bs4.BeautifulSoup(response.text, <span class="string">"html.parser"</span>)</span><br><span class="line">    <span class="comment"># 寻找标签 ul css:news-list 的子标签</span></span><br><span class="line">    liList = soup.find(<span class="string">"ul"</span>, class_=<span class="string">"news-list"</span>).children</span><br><span class="line">    <span class="comment"># 对li标签进行遍历</span></span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> liList:</span><br><span class="line">        <span class="comment"># 判断类型是否为Tag</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(li, bs4.element.Tag):</span><br><span class="line">            e = []</span><br><span class="line">            <span class="comment"># 提取出文章日期信息</span></span><br><span class="line">            date = li.span.string</span><br><span class="line">            <span class="comment"># 提取出文章标题</span></span><br><span class="line">            title = li.a.string</span><br><span class="line">            <span class="comment"># 提取出文章网址</span></span><br><span class="line">            url = li.a[<span class="string">'href'</span>]</span><br><span class="line">            <span class="keyword">if</span> date <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> title <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            e.append(title)</span><br><span class="line">            e.append(url)</span><br><span class="line">            e.append(date)</span><br><span class="line">            result.append(e)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>​    运行结果无误</p><p>​    采用 requests 库构建 HTTP 请求，再使用 BeautifulSoup 库进行 html 解析，找到存放文章 url 的标签之后，对该标签进行遍历，并过滤掉无用的标签，最后再不断拆分 html 数据，组合成自己 的数据结构。</p><h3 id="3-2-数据解析"><a href="#3-2-数据解析" class="headerlink" title="3.2 数据解析"></a>3.2 数据解析</h3><blockquote><p>向服务器发送请求-&gt;编码猜测-&gt;对 html 文档进行解析-&gt;遍历 p 标签-&gt;组合 p 标签数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义获取文章函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_article</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># 发送http请求</span></span><br><span class="line">    response = requests.get(base_url + url)</span><br><span class="line">    <span class="comment"># 判断是否请求成功</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code != <span class="number">200</span>:</span><br><span class="line">        print(<span class="string">"response 请求失败"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    <span class="comment"># 设置相应数据的编码为猜测的编码</span></span><br><span class="line">    response.encoding = response.apparent_encoding</span><br><span class="line">    <span class="comment"># 使用BeautifulSoup进行煲汤 解析器为 html.parser</span></span><br><span class="line">    soup = bs4.BeautifulSoup(response.text, <span class="string">"html.parser"</span>)</span><br><span class="line">    <span class="comment"># 寻找标签 div id:article_dnull</span></span><br><span class="line">    div_element = soup.find(<span class="string">"div"</span>, id=<span class="string">"article_dnull"</span>)</span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    <span class="comment"># 找到 div 标签下所有的p标签并进行遍历</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> div_element.findAll(<span class="string">"p"</span>):</span><br><span class="line">        <span class="keyword">if</span> p.string <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        result = result + p.string</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>​    运行结果无误</p><p>​    分析:采用 requests 库构建 HTTP 请求，使用 BeautifulSoup 库进行 html 解析，定位到存放文章的 标签 div 上面，再对其下的 p 标签进行遍历，取出每一句的文章数据进行组合。</p><h3 id="3-3-数据保存"><a href="#3-3-数据保存" class="headerlink" title="3.3 数据保存"></a>3.3 数据保存</h3><blockquote><p>替换掉特殊字符-&gt;取出文章数据-&gt;判断文章是否为空-&gt;写入磁盘-&gt;打印 log</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义保存文章函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_article</span><span class="params">(l,path)</span>:</span></span><br><span class="line">    <span class="comment"># 替换掉标题中的特殊字符 避免不能保存</span></span><br><span class="line">    title = l[<span class="number">0</span>].replace(<span class="string">"："</span>, <span class="string">""</span>)</span><br><span class="line">    title = title.replace(<span class="string">":"</span>, <span class="string">""</span>)</span><br><span class="line">    title = title.replace(<span class="string">"/"</span>, <span class="string">""</span>)</span><br><span class="line">    totalPath = path + l[<span class="number">2</span>] + <span class="string">"-"</span> + title + <span class="string">".txt"</span></span><br><span class="line">    <span class="comment"># 取出文章数据</span></span><br><span class="line">    article = get_article(l[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 判断文章是否为空</span></span><br><span class="line">    <span class="keyword">if</span> article == <span class="string">""</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 保存数据</span></span><br><span class="line">    <span class="keyword">with</span> open(totalPath, <span class="string">'wt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(article)</span><br><span class="line">    <span class="comment"># 打印log</span></span><br><span class="line">    print(l[<span class="number">2</span>] + <span class="string">"-"</span> + l[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>​    分析:取出文章的标题信息，将标题信息的特殊字符过滤掉避免无法保存到计算机里，判断文章 数据是否为空值，写出文本文件。</p><h3 id="3-4-数据导入"><a href="#3-4-数据导入" class="headerlink" title="3.4 数据导入"></a>3.4 数据导入</h3><blockquote><p>遍历文件夹-&gt;截取时间元组-&gt;读入文本数据-&gt;判断文本类型-&gt;组合数据返回</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os;</span><br><span class="line"><span class="keyword">import</span> os.path;</span><br><span class="line"><span class="keyword">import</span> codecs;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_traversal</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">"""遍历文件夹</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    遍历数据文件夹</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        path: 待遍历的文件路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        拥有多个返回值 filePaths,fileContents,dateTimes,Species</span></span><br><span class="line"><span class="string">        都为list类型</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 文件路径</span></span><br><span class="line">    filePaths = []</span><br><span class="line">    <span class="comment"># 文件内容</span></span><br><span class="line">    fileContents = []</span><br><span class="line">    <span class="comment"># 日期</span></span><br><span class="line">    years = []</span><br><span class="line">    months = []</span><br><span class="line">    days = []</span><br><span class="line">    <span class="comment"># 类别</span></span><br><span class="line">    Species=[]</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> name == <span class="string">".DS_Store"</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment">#从文件名中截取出时间元组</span></span><br><span class="line">            time_str = name[:<span class="number">10</span>]</span><br><span class="line">            year = int(time_str[:<span class="number">4</span>])</span><br><span class="line">            month = int(time_str[<span class="number">5</span>:<span class="number">7</span>])</span><br><span class="line">            day = int(time_str[<span class="number">9</span>:<span class="number">11</span>])</span><br><span class="line">            filePath = os.path.join(root,name)</span><br><span class="line">            filePaths.append(filePath)</span><br><span class="line">            f = codecs.open(filePath,<span class="string">'r'</span>,<span class="string">'utf-8'</span>)</span><br><span class="line">            fileContent = f.read()</span><br><span class="line">            f.close()</span><br><span class="line">            years.append(year)</span><br><span class="line">            months.append(month)</span><br><span class="line">            days.append(day)</span><br><span class="line">            fileContents.append(fileContent)</span><br><span class="line">            <span class="keyword">if</span> root.find(<span class="string">'consultant'</span>) != <span class="number">-1</span>:</span><br><span class="line">                Species.append(<span class="string">'consultant'</span>)</span><br><span class="line">            <span class="keyword">elif</span> root.find(<span class="string">'countries_policy'</span>) != <span class="number">-1</span>:</span><br><span class="line">                Species.append(<span class="string">'countries_policy'</span>)</span><br><span class="line">            <span class="keyword">elif</span>  root.find(<span class="string">'school_policy'</span>) != <span class="number">-1</span>:</span><br><span class="line">                Species.append(<span class="string">'school_policy'</span>)</span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                Species.append(<span class="string">'null'</span>)</span><br><span class="line">    <span class="keyword">return</span> filePaths,fileContents,Species,years,months,days</span><br></pre></td></tr></table></figure><p>​    运行结果无误</p><p>​    分析:采用 os.walk 进行文件遍历，使用 codecs.open 读入文本数据，分割出文章文本的发布时 间，通过文件路径名判断文本数据的类型</p><h3 id="3-5-数据预处理"><a href="#3-5-数据预处理" class="headerlink" title="3.5 数据预处理"></a>3.5 数据预处理</h3><blockquote><p>将数据读入的返回值构建成语料库</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_corpus</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">"""构建语料库</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    构建语料库</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        path: 待遍历的文件路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">       DateFrame 语料库</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    filePaths,fileContents,Species,years,months,days = file_traversal(path)</span><br><span class="line">    <span class="comment"># 将filePath、fileContent、dateTime、Species 加载到数据框corpos中，形成语料库</span></span><br><span class="line"></span><br><span class="line">    corpos = pandas.DataFrame(&#123;</span><br><span class="line">        <span class="string">'filePath'</span>:filePaths,</span><br><span class="line">        <span class="string">'fileContent'</span>:fileContents,</span><br><span class="line">        <span class="string">'Species'</span>:Species,</span><br><span class="line">        <span class="string">'year'</span>:years,</span><br><span class="line">        <span class="string">'month'</span>:months,</span><br><span class="line">        <span class="string">'day'</span>:days</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> corpos</span><br></pre></td></tr></table></figure><p>​    运行结果无误</p><p>​    分析:将文件遍历的结构构建成语料库</p><h3 id="3-6-文本关键词模型的构建"><a href="#3-6-文本关键词模型的构建" class="headerlink" title="3.6 文本关键词模型的构建"></a>3.6 文本关键词模型的构建</h3><blockquote><p>创建线程池-&gt;遍历语料库-&gt;提交结巴分词任务-&gt;读入停用词-&gt;采用 TextRank 进行分词-&gt;等待线程结束-&gt;组合多线程函数结果</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义结巴分词函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jieba_segment</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="string">"""结巴分词</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    对语料库文本进行中文分词</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        content: 待切割文本</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">       List [&#123;'word':a,'count',1&#125;] 分词列表</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 分词词库</span></span><br><span class="line">    segments = []</span><br><span class="line">    <span class="comment"># 读入停用词</span></span><br><span class="line">    stopwords = pandas.read_csv(</span><br><span class="line">        <span class="string">"/Users/Apple/Documents/CodeWork/DataAnalysis/code_week_6/3.1/StopwordsCN.txt"</span>,</span><br><span class="line">        encoding=<span class="string">'utf8'</span>,</span><br><span class="line">        index_col=<span class="keyword">False</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    words = jieba.analyse.textrank(content, topK=<span class="number">50</span>,withWeight=<span class="keyword">False</span>,allowPOS=(<span class="string">'ns'</span>, <span class="string">'n'</span>, <span class="string">'vn'</span>, <span class="string">'v'</span>))</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        <span class="comment"># 记录全局分词</span></span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> stopwords:</span><br><span class="line">            segments.append(&#123;<span class="string">'word'</span>:word, <span class="string">'count'</span>:<span class="number">1</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> segments</span><br><span class="line">  </span><br><span class="line"> <span class="comment"># 定义中文分词函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor,wait,ALL_COMPLETED</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">word_segment</span><span class="params">(corpos)</span>:</span></span><br><span class="line">    <span class="string">"""中文分词</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    对语料库文本进行中文分词，由于数据量较大，采用多线程方式执行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        corpos: 语料库</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">       DateFrame 词频</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 创建线程池</span></span><br><span class="line">    executor = ThreadPoolExecutor(max_workers=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 线程池句柄</span></span><br><span class="line">    all_task = []</span><br><span class="line">    <span class="comment"># 分词词库</span></span><br><span class="line">    segments = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> index, row <span class="keyword">in</span> corpos.iterrows():</span><br><span class="line">        content = row[<span class="string">'fileContent'</span>]</span><br><span class="line">        all_task.append(executor.submit(jieba_segment,content))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待线程全部完成</span></span><br><span class="line">    wait(all_task, return_when=ALL_COMPLETED)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将结果汇总</span></span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> all_task:</span><br><span class="line">        segments.extend(task.result())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构建DateFrame</span></span><br><span class="line">    dfSg = pd.DataFrame(segments)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dfSg</span><br></pre></td></tr></table></figure><p>​    运行结果无误</p><p>​    分析:由于数据量过于庞大，单线程需要等待时间过久，这里采用多线程的方式进行文本分割， 建立线程池后，将待分割的文本数据传入结巴分词函数中，结巴分词采用 TextRank 算法进行文本 分割，等待文本分割完成后，再将数据组合。</p><h3 id="3-7-文本关键词模型的训练"><a href="#3-7-文本关键词模型的训练" class="headerlink" title="3.7 文本关键词模型的训练"></a>3.7 文本关键词模型的训练</h3><blockquote><p>词频统计:将分词进行聚合合并-&gt;降序排序-&gt;过滤数据-&gt;转换成元组数据</p><p>词云图生成:输入词频元组数据,标题，设置词云图参数，返回词云图对象</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义词频统计函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">word_frequency</span><span class="params">(segment_dataframe,count_filter = <span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">"""词频统计</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    对分词的数据进行合并统计</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        segment_dataframe: 中文分词</span></span><br><span class="line"><span class="string">        count_filter:排除小于过滤的词</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">       tuple 词频</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 对分词进行合并</span></span><br><span class="line">    ser_word = segment_dataframe.groupby(<span class="string">'word'</span>)[<span class="string">'count'</span>].sum()</span><br><span class="line">    <span class="comment"># 对分词进行排序</span></span><br><span class="line">    nSegStat = ser_word.sort_values(ascending=<span class="keyword">False</span>)</span><br><span class="line">    <span class="comment"># 过滤</span></span><br><span class="line">    nSegStat = nSegStat[nSegStat &gt;= count_filter]</span><br><span class="line">    <span class="comment"># 转换成元组数据</span></span><br><span class="line">    tup = tuple(zip(nSegStat.index,nSegStat))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> tup</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义生成词云图函数</span></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Page, WordCloud</span><br><span class="line"><span class="keyword">from</span> pyecharts.globals <span class="keyword">import</span> SymbolType,CurrentConfig, NotebookType</span><br><span class="line">CurrentConfig.NOTEBOOK_TYPE = NotebookType.JUPYTER_LAB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_word_cloud</span><span class="params">(data,title=<span class="string">""</span>)</span>:</span></span><br><span class="line">  word_cloud = (</span><br><span class="line">    WordCloud()</span><br><span class="line">    <span class="comment"># 添加数据和词云图的标题 字大小</span></span><br><span class="line">    .add(series_name=title, data_pair=data, word_size_range=[<span class="number">10</span>, <span class="number">100</span>])</span><br><span class="line">    <span class="comment"># 设置图片的参数</span></span><br><span class="line">    .set_global_opts(</span><br><span class="line">      title_opts=opts.TitleOpts(</span><br><span class="line">        title=title, title_textstyle_opts=opts.TextStyleOpts(font_size=<span class="number">23</span>)</span><br><span class="line">      ),</span><br><span class="line">      tooltip_opts=opts.TooltipOpts(is_show=<span class="keyword">True</span>),</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> word_cloud</span><br></pre></td></tr></table></figure><p>​    运行结果无误</p><p>​    分析:词频统计将分词数据使用聚合函数进行分类，使用 sort_values 进行降序排序，过滤掉过 小而无法显示的数据，提高词云图渲染的速度。</p><h2 id="4-系统测试分析"><a href="#4-系统测试分析" class="headerlink" title="4 系统测试分析"></a>4 系统测试分析</h2><h3 id="4-1-数据爬取"><a href="#4-1-数据爬取" class="headerlink" title="4.1 数据爬取"></a>4.1 数据爬取</h3><blockquote><p>创建线程池-&gt;设置抓取的资讯-&gt;获取数据列表-&gt;遍历数据列表-&gt;提交爬取文章任务</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建线程池</span></span><br><span class="line">executor = ThreadPoolExecutor(max_workers=<span class="number">20</span>)</span><br><span class="line"><span class="comment"># 开始位置</span></span><br><span class="line">start = <span class="number">0</span></span><br><span class="line">go_ahead = <span class="keyword">True</span></span><br><span class="line"><span class="comment"># 招生资讯:kydt  院校政策:yxzc 国家政策:zcdh</span></span><br><span class="line">model = <span class="string">"zcdh"</span></span><br><span class="line"></span><br><span class="line">file_path = <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> model == <span class="string">"kydt"</span>:</span><br><span class="line">    file_path = <span class="string">"consultant"</span></span><br><span class="line"><span class="keyword">elif</span> model == <span class="string">"yxzc"</span>:</span><br><span class="line">    file_path = <span class="string">"school_policy"</span></span><br><span class="line"><span class="keyword">elif</span> model == <span class="string">"zcdh"</span>:</span><br><span class="line">    file_path = <span class="string">"countries_policy"</span></span><br><span class="line"><span class="keyword">if</span> file_path == <span class="string">""</span>:</span><br><span class="line">    print(<span class="string">"请输入合理的爬虫参数"</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> go_ahead:</span><br><span class="line">    <span class="comment"># 获取50个数据列表</span></span><br><span class="line">    clist = get_consultant_list(start,model)</span><br><span class="line">    <span class="comment"># 线程句柄保存</span></span><br><span class="line">    all_task = []</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> clist:</span><br><span class="line">        <span class="comment"># 读取年份数据</span></span><br><span class="line">        year = (l[<span class="number">2</span>])[:<span class="number">4</span>]</span><br><span class="line">        <span class="keyword">if</span> year == <span class="string">"2012"</span>:</span><br><span class="line">            go_ahead = <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 数据分类分年存放</span></span><br><span class="line">        path = os.getcwd()+<span class="string">'/'</span>+file_path+<span class="string">'/'</span>+year+<span class="string">"/"</span></span><br><span class="line">        <span class="comment"># 判断文件夹是否存在 不存在创建一个新的文件夹</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            os.makedirs(path)</span><br><span class="line">        <span class="comment"># 将获取数据函数加入线程池</span></span><br><span class="line">        all_task.append(executor.submit(save_article,l,path))</span><br><span class="line">    <span class="comment"># 等待所有线程完成</span></span><br><span class="line">    wait(all_task, return_when=ALL_COMPLETED)</span><br><span class="line">    <span class="comment"># 进行下一个开始位置</span></span><br><span class="line">    start = start + <span class="number">50</span></span><br></pre></td></tr></table></figure><p>​    分析:数据量过大且 HTTP 请求需要时间，采用了多线程的方式爬取数据，并将数据按照规定的</p><p>格式进行保存，方便数据读入分析。</p><h3 id="4-2-总体分析"><a href="#4-2-总体分析" class="headerlink" title="4.2 总体分析"></a>4.2 总体分析</h3><blockquote><p>将数据文件夹传入-&gt;构建语料库-&gt;创建中文分词-&gt;将词频低于 150 次的词过滤，提高词云图的</p><p>渲染速度-&gt;创建词云图-&gt;保存图片</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/总体分析代码图.png" alt="总体分析代码图"></p><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/OverallAnalysis.png" alt="OverallAnalysis"></p><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/OverallConsultant.png" alt="OverallConsultant"></p><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/OverallCountriesPolicy.png" alt="OverallCountriesPolicy"></p><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/OverallSchoolPolicy.png" alt="OverallSchoolPolicy"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 研究项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据挖掘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用pyecharts绘制heatmap</title>
      <link href="/2019/04/02/%E4%BD%BF%E7%94%A8pyecharts%E7%BB%98%E5%88%B6heatmap/"/>
      <url>/2019/04/02/%E4%BD%BF%E7%94%A8pyecharts%E7%BB%98%E5%88%B6heatmap/</url>
      
        <content type="html"><![CDATA[<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/5ca36ec4ec64f.png" alt="2016级物联网工程生源图"></p><h2 id="准备步骤"><a href="#准备步骤" class="headerlink" title="准备步骤"></a>准备步骤</h2><p>首先需要安装pyecharts库以及地图库<br>在上一篇文章中已经教大家安装了<br>传送门:<a href="https://blog.chenyouguang.cn/2019/04/02/Anaconda%E5%AE%89%E8%A3%85pyecharts%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2%E5%BA%93/">Anaconda安装pyecharts可视化界面库</a></p><blockquote><p>大家可以参考一下官方文档:<a href="http://pyecharts.org/#/zh-cn/charts_base?id=heatmap%EF%BC%88%E7%83%AD%E5%8A%9B%E5%9B%BE%EF%BC%89" target="_blank" rel="noopener">heatmap</a></p></blockquote><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><blockquote><p>打算做一个大连民族大学2016级物联网工程专业的生源分布热力图<br><a href="http://zs.dlnu.edu.cn/BkPlan.aspx?A_type=%E6%8B%9B%E7%94%9F%E8%AE%A1%E5%88%92&amp;Page=1" target="_blank" rel="noopener">大连民族大学招生网</a><br>从招生官网中获取到数据(理论上可以使用爬虫直接获取)</p></blockquote><table><thead><tr><th>省份</th><th>人数</th></tr></thead><tbody><tr><td>广西</td><td>10</td></tr><tr><td>内蒙古</td><td>11</td></tr><tr><td>河北</td><td>5</td></tr><tr><td>贵州</td><td>6</td></tr><tr><td>吉林</td><td>11</td></tr><tr><td>黑龙江</td><td>2</td></tr><tr><td>山东</td><td>2</td></tr><tr><td>重庆</td><td>5</td></tr></tbody></table><blockquote><p>csv数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">省份,人数</span><br><span class="line">广西,10</span><br><span class="line">内蒙古,11</span><br><span class="line">河北,5</span><br><span class="line">贵州,6</span><br><span class="line">吉林,11</span><br><span class="line">黑龙江,2</span><br><span class="line">山东,2</span><br><span class="line">重庆,5</span><br></pre></td></tr></table></figure><h2 id="开始编码"><a href="#开始编码" class="headerlink" title="开始编码"></a>开始编码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Geo</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> read_csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># TODO 修改成自己的文件路径</span></span><br><span class="line">df1 = read_csv(</span><br><span class="line"><span class="string">'people.csv'</span>,</span><br><span class="line"> encoding=<span class="string">'UTF-8'</span></span><br><span class="line"> )</span><br><span class="line"></span><br><span class="line">geo = Geo(<span class="string">"2016级物联网工程生源图"</span>, <span class="string">"data from iot"</span>, title_color=<span class="string">"#fff"</span>, title_pos=<span class="string">"center"</span>, width=<span class="number">1200</span>, height=<span class="number">600</span>, background_color=<span class="string">'#404a59'</span>)</span><br><span class="line"></span><br><span class="line">geo.add(<span class="string">"2016级物联网工程生源图"</span>, df1[<span class="string">'省份'</span>], df1[<span class="string">'人数'</span>], visual_range=[<span class="number">0</span>, <span class="number">11</span>], type=<span class="string">'heatmap'</span>,visual_text_color=<span class="string">"#fff"</span>, symbol_size=<span class="number">15</span>, is_visualmap=<span class="keyword">True</span>, is_roam=<span class="keyword">False</span>)</span><br><span class="line"><span class="comment"># TODO 修改成自己的生成文件路径</span></span><br><span class="line">geo.render(path=<span class="string">"./16物联网工程生源.html"</span>)</span><br></pre></td></tr></table></figure><h2 id="打开生成文件"><a href="#打开生成文件" class="headerlink" title="打开生成文件"></a>打开生成文件</h2><p>执行完之后会在py文件所在文件夹下有一个html文件<br>使用现代浏览器打开即可(推荐chrome,火狐)<br><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/5ca36ec4ec64f-20200302115937226.png" alt="2016级物联网工程生源图"></p><blockquote><p>如果打开html文件只显示南海群岛的话，需要等待一下再进行刷新即可</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 热力图 </tag>
            
            <tag> 数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda安装pyecharts可视化界面库</title>
      <link href="/2019/04/02/Anaconda%E5%AE%89%E8%A3%85pyecharts%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2%E5%BA%93/"/>
      <url>/2019/04/02/Anaconda%E5%AE%89%E8%A3%85pyecharts%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="pyecharts-介绍"><a href="#pyecharts-介绍" class="headerlink" title="pyecharts 介绍"></a>pyecharts 介绍</h2><blockquote><p>A Python Echarts Plotting Library.<br>Chart: 30+ kinds of charts<br>Map: 300+ Chinese cities / 200+ countries and regions<br>Platforms: Pure Python / Jupyter Notebook / Web Framework<br>pyecharts 是一个用于生成 Echarts 图表的类库。Echarts 是百度开源的一个数据可视/Users/Apple/Documents/GitHub/blog/source/_posts/解决Mac下matplotlib中文不能显示问题.md化 JS 库。用 Echarts 生成的图可视化效果非常棒，pyecharts 是为了与 Python 进行对接，方便在 Python 中直接使用数据生成图。</p></blockquote><p><a href="http://pyecharts.org" target="_blank" rel="noopener">pyecharts官网</a><br>大家根据自己的使用平台采用不同的安装方式</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><blockquote><p>本分支适合使用Windows系统的同学</p></blockquote><ol><li><p>打开anaconda prompt</p><p> <img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/5ca369d561785-20200302115818958.jpg" alt="Anaconda Prompt"></p></li></ol><h2 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h2><blockquote><p>本分支适合使用MacOS系统的同学</p></blockquote><ol><li><p>首先确定包管理器pip是anaconda的pip</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> pip</span><br></pre></td></tr></table></figure><blockquote><p>out:<br>/Users/Apple/anaconda3/bin/pip<br>简单判断路径中含有anaconda即可</p></blockquote></li><li><p>如果pip未指向anaconda中的pip(符合条件1的可跳过此步骤)</p><blockquote><p>打开Anaconda-Navigator -&gt; Environments -&gt; base(也可以自己新建一个环境,默认是选择这个) -&gt; Open Terminal</p></blockquote><p> <img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/5ca361528ad97.png" alt="anaconda"><br> 此时，再执行步骤1，如果不行的话可以自行通过搜索引擎进行搜索解决</p></li></ol><h2 id="安装pyecharts"><a href="#安装pyecharts" class="headerlink" title="安装pyecharts"></a>安装pyecharts</h2><blockquote><p>由于一些众所周知的原因，安装可能会有一点点慢。<br>可以自行更换清华软件源解决 <a href="https://mirror.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener">清华软件源-pypi镜像</a></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyecharts</span><br></pre></td></tr></table></figure><blockquote><p>安装地图数据</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip install echarts-countries-pypkg</span><br><span class="line">pip install echarts-china-provinces-pypkg</span><br><span class="line">pip install echarts-china-cities-pypkg</span><br><span class="line">pip install echarts-china-counties-pypkg</span><br><span class="line">pip install echarts-china-misc-pypkg</span><br><span class="line">pip install echarts-united-kingdom-pypkg</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决Mac下matplotlib中文不能显示问题</title>
      <link href="/2019/03/26/%E8%A7%A3%E5%86%B3Mac%E4%B8%8Bmatplotlib%E4%B8%AD%E6%96%87%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
      <url>/2019/03/26/%E8%A7%A3%E5%86%B3Mac%E4%B8%8Bmatplotlib%E4%B8%AD%E6%96%87%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="未解决前"><a href="#未解决前" class="headerlink" title="未解决前"></a>未解决前</h2><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/5c999b65e7a0a.png" alt="未解决图"><br>可以看到未解决前，中文字体显示为一个个矩形边框</p><hr><h2 id="下载字体"><a href="#下载字体" class="headerlink" title="下载字体"></a>下载字体</h2><p>首先我们先下载缺失的字体文件，任选一个下载即可<br><a href="http://www.fontpalace.com/" target="_blank" rel="noopener">fontpalace</a><br><a href="https://pan.baidu.com/s/1gWkaTQVp33awnAdTXrlHQQ" target="_blank" rel="noopener">百度云</a>  提取码: 6m92</p><p>如果您需要对图表商业化使用，下面有一些免费的开源字体列表</p><p><a href="https://www.websiteplanet.com/blog/best-free-fonts/" target="_blank" rel="noopener">开源字体列表(English)</a></p><p><a href="https://www.uisdc.com/200-models-free-commercial-fonts" target="_blank" rel="noopener">开源字体列表1(中文)</a></p><p><a href="https://sspai.com/post/42889" target="_blank" rel="noopener">开源字体列表2(中文)</a></p><h2 id="获取matplotlib的存放地址"><a href="#获取matplotlib的存放地址" class="headerlink" title="获取matplotlib的存放地址"></a>获取matplotlib的存放地址</h2><blockquote><p>进入python控制台执行以下命令获取文件路径</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">matplotlib.matplotlib_fname()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/5c99a7fec88ef.png" alt="python控制台"></p><blockquote><p>控制台输出中 /Users/Apple/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc 是matplotlib的存放路径</p></blockquote><p>使用 Finder -&gt; 前往 -&gt; 前往文件夹<br><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/5c99abc138a82.png" alt="前往文件夹"><br>将下载好的字体文件保存到fonts/ttf文件夹下<br><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/5c99abcaa49b8.png" alt="保存文件"></p><h2 id="删除缓存文件"><a href="#删除缓存文件" class="headerlink" title="删除缓存文件"></a>删除缓存文件</h2><p>打开控制台执行以下两个命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/.matplotlib/*.cache</span><br><span class="line">rm -rf ~/.matplotlib/fontList.json</span><br></pre></td></tr></table></figure><h2 id="重建字体缓存"><a href="#重建字体缓存" class="headerlink" title="重建字体缓存"></a>重建字体缓存</h2><blockquote><p>进入python控制台执行以下命令</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> _rebuild</span><br><span class="line">_rebuild()</span><br></pre></td></tr></table></figure><h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><p>重新运行一下绘图程序<br><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/5c99adf1b4fc8.png" alt="大功告成"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/6840f9e3ed48" target="_blank" rel="noopener">Mac os中matplotlib中文乱码问题</a><br><a href="http://chenson.cc/2018/04/10/Mac%E7%B3%BB%E7%BB%9F%E4%B8%8Bmatplotlib%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87/" target="_blank" rel="noopener">Mac系统下matplotlib显示中文</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中文乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派3B串口配置教程</title>
      <link href="/2018/11/21/%E6%A0%91%E8%8E%93%E6%B4%BE3B%E4%B8%B2%E5%8F%A3%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
      <url>/2018/11/21/%E6%A0%91%E8%8E%93%E6%B4%BE3B%E4%B8%B2%E5%8F%A3%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派3B串口配置教程"><a href="#树莓派3B串口配置教程" class="headerlink" title="树莓派3B串口配置教程"></a>树莓派3B串口配置教程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>为什么需要配置串口？直接不能用吗？<br>树莓派有两个串口，一个是硬件串口(PL011 UART)，一个是迷你串口(mini-uart),在默认情况下，蓝牙模块会使用PL011串口也就是硬件串口，而迷你串口(mini-uart)用于控制台输出。迷你UART的波特率与VC4 GPU上VPU的核心频率相关联。这意味着当VPU频率调节器改变核心频率时，UART的波特率也会发生变化。这使得UART在默认状态下受限使用。</p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p>本教程将参考官方文档教大家配置<br>树莓派系统: raspbian-stretch</p></blockquote><h2 id="官方文档-英文"><a href="#官方文档-英文" class="headerlink" title="官方文档(英文)"></a>官方文档(英文)</h2><ol><li><a href="https://www.raspberrypi.org/documentation/configuration/uart.md" target="_blank" rel="noopener">官方文档(英文)</a></li><li>树莓派中也有配置文档</li></ol><blockquote><p>到达overlays文件夹</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /boot/overlays</span><br></pre></td></tr></table></figure><blockquote><p>查看全部文档</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat README</span><br></pre></td></tr></table></figure><blockquote><p>查看单个文档</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dtoverlay -h pi3-miniuart-bt</span><br></pre></td></tr></table></figure><blockquote><p>这里把文档贴出来<br>Name:   pi3-miniuart-bt<br>Info:   Switch Pi3 Bluetooth function to use the mini-UART (ttyS0) and restore UART0/ttyAMA0 over GPIOs 14 &amp; 15. Note that this may reduce the maximum usable baudrate.N.B. It is also necessary to edit /lib/systemd/system/hciuart.service and replace ttyAMA0 with ttyS0, unless you have a system with udev rules that create /dev/serial0 and /dev/serial1, in which case use/dev/serial1 instead because it will always be correct. Furthermore,you must also set core_freq=250 in config.txt or the miniuart will notwork.<br>Usage:  dtoverlay=pi3-miniuart-bt<br>Params:</p></blockquote><h2 id="教程开始"><a href="#教程开始" class="headerlink" title="教程开始"></a>教程开始</h2><h3 id="1-通过SSH连接树莓派"><a href="#1-通过SSH连接树莓派" class="headerlink" title="1. 通过SSH连接树莓派"></a>1. 通过SSH连接树莓派</h3><h3 id="2-查看串口状态"><a href="#2-查看串口状态" class="headerlink" title="2. 查看串口状态"></a>2. 查看串口状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /dev</span><br></pre></td></tr></table></figure><blockquote><p>结果将会看到所有接口 找到以下串口</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lrwxrwxrwx 1 root root           7 Nov 21 12:14 serial0 -&gt; ttyS0</span><br><span class="line">lrwxrwxrwx 1 root root           5 Nov 21 12:14 serial1 -&gt; ttyAMA0</span><br></pre></td></tr></table></figure><h3 id="3-关闭板载蓝牙"><a href="#3-关闭板载蓝牙" class="headerlink" title="3. 关闭板载蓝牙"></a>3. 关闭板载蓝牙</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">disable</span> hciuart</span><br></pre></td></tr></table></figure><h3 id="4-修改-hciuart-service"><a href="#4-修改-hciuart-service" class="headerlink" title="4.修改 hciuart.service"></a>4.修改 hciuart.service</h3><blockquote><p>文件路径 /lib/systemd/system/hciuart.service<br>将文件中 ttyAMA0 替换为 ttyS0</p></blockquote><p><strong>如果hciuart.service中没有ttyAMA0可以跳过本步骤！</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/hciuart.service</span><br></pre></td></tr></table></figure><h3 id="5-修改-cmdline-txt"><a href="#5-修改-cmdline-txt" class="headerlink" title="5. 修改 cmdline.txt"></a>5. 修改 cmdline.txt</h3><blockquote><p>文件路径 /boot/cmdline.txt (修改前注意备份)<br>删除掉 console=ttyAMA0,115200 kgdboc=ttyAMA0,115200</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /boot</span><br><span class="line">sudo cp cmdline.txt cmdline.txtbak</span><br><span class="line">vim cmdline.txt</span><br></pre></td></tr></table></figure><blockquote><p>修改为以下配置  (参考)</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dwc_otg.lpm_enable=0 console=tty1 root=PARTUUID=d71c341c-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait quiet splash plymouth.ignore-serial-consoles</span><br></pre></td></tr></table></figure><h3 id="6-修改-config-txt"><a href="#6-修改-config-txt" class="headerlink" title="6. 修改 config.txt"></a>6. 修改 config.txt</h3><blockquote><p>文件路径 /boot/config.txt (修改前注意备份)<br>在尾部添加一行 dtoverlay=pi3-miniuart-bt<br>如果存在 dtoverlay=pi3-disable-bt 请在前面加 # 注释掉<br>据说如果同时存在两行串口会不能使用</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /boot</span><br><span class="line">sudo cp config.txt config.txtbak</span><br><span class="line">vim config.txt</span><br></pre></td></tr></table></figure><h3 id="7-重启"><a href="#7-重启" class="headerlink" title="7. 重启"></a>7. 重启</h3><blockquote><p>重启</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><blockquote><p>重启后查看串口接口</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -l /dev</span><br><span class="line">lrwxrwxrwx 1 root root           7 Nov 21 12:14 serial0 -&gt; ttyAMA0</span><br><span class="line">lrwxrwxrwx 1 root root           5 Nov 21 12:14 serial1 -&gt; ttyS0</span><br></pre></td></tr></table></figure><blockquote><p>如果结果一样证明已经配置成功，诺出现不能开机，请自行恢复备份文件！</p></blockquote><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.raspberrypi.org/documentation/configuration/uart.md" target="_blank" rel="noopener">https://www.raspberrypi.org/documentation/configuration/uart.md</a></li><li><a href="https://www.jianshu.com/p/12d4f6882371" target="_blank" rel="noopener">https://www.jianshu.com/p/12d4f6882371</a></li><li><a href="https://zhuanlan.zhihu.com/p/35312687" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35312687</a></li><li><a href="https://blog.csdn.net/asukasmallriver/article/details/76851375" target="_blank" rel="noopener">https://blog.csdn.net/asukasmallriver/article/details/76851375</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 串口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一种基于RFID的无人图书馆解决方案</title>
      <link href="/2018/06/01/%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8ERFID%E7%9A%84%E6%97%A0%E4%BA%BA%E5%9B%BE%E4%B9%A6%E9%A6%86%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2018/06/01/%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8ERFID%E7%9A%84%E6%97%A0%E4%BA%BA%E5%9B%BE%E4%B9%A6%E9%A6%86%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/0522.388.jpg" alt="成品渲染图"></p><p>​    生活、学习中的图书借阅和归还是比较费时费力的，有时候往往会因为图书馆人流拥挤，闭馆整理或者网电断停等等原因，无法顺利完成图书借阅，借书人和图书馆双方都会因种种不便承受各种损失。为此，基于物联网、无线传感器和云服务计算技术，我设计并开发了一种RFID智慧图书馆系统。<br><a id="more"></a></p><h2 id="1-研究背景"><a href="#1-研究背景" class="headerlink" title="1 研究背景"></a>1 研究背景</h2><p>​    随着人工智能概念的日渐火爆及国家2025规划的推进，传统管理服务行业很难满足广大人群的有效需求。将现代管理及互联网与新一代信息技术应用于无人智能管理服务，最终使广大人群实现生活学习的不断便捷化、高效化。</p><p>​    人工智能，是智能化、自动化、信息化相结合的产物。在全球产业寻求变革的关键时刻，传统服务产业要紧跟时代潮流，结合行业特点，融合互联网特色，摸索出符合自身行业的发展模式才能在这瞬息巨变的时代优质存活并长足发展。</p><p>​    生活、学习中的图书借阅和归还是比较费时费力的，有时候往往会因为图书馆人流拥挤，闭馆整理或者网电断停等等原因，无法顺利完成图书借阅，借书人和图书馆双方都会因种种不便承受各种损失。为此，基于物联网、无线传感器和云服务计算技术，我们开发了RFID智慧图书馆系统。</p><h2 id="2-设计理念"><a href="#2-设计理念" class="headerlink" title="2 设计理念"></a>2 设计理念</h2><p>​    智慧图书馆图书管理系统采用互联网信息处理行业前沿技术，致力于为传统图书馆过渡到现代化智慧图书馆而设计，打造一个方便快捷又能提升用户借阅书籍体验的智慧图书管理系统。简单来说就是将书籍贴上RFID标签并连接上互联网进行数据库信息管理，减少人工管理图书馆的劳动力度，减少书籍的信息误差，尽可能的减少图书馆运营成本，让图书馆高效自行运作起来。</p><h2 id="3-特色和创新"><a href="#3-特色和创新" class="headerlink" title="3 特色和创新"></a>3 特色和创新</h2><p>(<strong>1</strong>)<strong>多元交互界面</strong></p><p>​    相比以往传统书籍借阅，智慧图书馆系统界面风格极具特色，卡通元素，自然景，古典音乐等，流光溢彩，多轮转换。无需总是面对以往馆内沉闷脸孔和肃穆气氛， 大享欢快活泼借阅之旅。</p><p> (<strong>2</strong>)<strong>紧跟人工智能潮流</strong></p><p>​    采用互联网信息处理技术，并进行数据深入分析挖掘。根据用户借阅图书风格和 种类，经过数据分析比对后，在交互界面中展现同类好书推荐和新书尝鲜。</p><p> (<strong>3</strong>)<strong>功能应用模块化设计</strong></p><p>​    针对用户属性开发了管理端和用户端，分开设计。</p><p>​    管理端:管理功能一一俱全，图书借阅信息流量全天候监控，一目了然。用户信 息列表自动检索。终端设备状态实时报告等。</p><p>​    用户端:采用现代支付方式借阅书籍，新颖高效。借阅信息一览无余，归还时间 温馨􏰀醒，并开发书海探奇，书友家园等模块享有多元互动，好书推荐，实用备选， 新书尝鲜等功能。用户借阅之旅不亦乐乎。</p><p> (<strong>4</strong>)<strong>社会效益巨大</strong></p><p>​    通过新型图书借阅模式，科技创新，畅享借阅乐趣，培养阅读爱好，引领阅读风尚，读书求学，经世致用，国民素质不断􏰀升。</p><h2 id="4-系统架构"><a href="#4-系统架构" class="headerlink" title="4 系统架构"></a>4 系统架构</h2><h3 id="4-1-基本架构"><a href="#4-1-基本架构" class="headerlink" title="4.1 基本架构"></a>4.1 基本架构</h3><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/image-20200628010054701.png" alt="图4.1基本架构图" style="zoom:50%;" /></p><p>​    智慧图书馆系统基本架构由4个部分组成：后台管理部分、用户客户端部分、图书设备终端部分、云服务器部分，并由云服务器进行统一数据管理和统计。</p><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/容器图.png" alt="图4.2容器图"></p><p>(1) <strong>后台管理端</strong></p><p>   ​    后台管理端采用网页方式进行管理，使用网页管理拥有非常好跨平台性能。管理员使用任意一个拥有浏览器功能的操作系统进入后台管理系统即可实现全馆图书资料的录入、修改、删除等管理。</p><p>(2) <strong>云端</strong></p><p>   ​    以数据的存储和管理为核心的云计算系统，为应用提供接口，权限控制。使用者可以在任何时间，任何地点，通过任何可连接的装置连接到云端服务器方便的存取数据。</p><p>(3) <strong>图书设备终端</strong></p><p>   ​    无线识别感应器感应 RFID 芯片，把图书整体信息写入超低成本的 RFID 芯片并粘贴在图书中，高聚合融合成一体，可反复使用，供图书终端设备扫描。</p><p>(4) <strong>用户移动客户端</strong></p><p>   ​    用户使用移动客户端，可以识别图书终端设备生成的二维码订单并扫描完成图书借阅和归还，还可以根据用户借阅风格推荐相关书籍，分享读书心得互相交流。</p><h3 id="4-2-系统模型"><a href="#4-2-系统模型" class="headerlink" title="4.2 系统模型"></a>4.2 系统模型</h3><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/物联网模型.png" alt="图4.3物联网模型"></p><p>​    智慧图书馆采用分层分模块化设计，其中通过感知层用来标示和感知事物，是系统使用的入口，将采集到的书籍信息通过网络层，使用无线网络上传至云计算平台 中，在云计算平台搭建自己的服务器，将数据信息进行统一管理和维护。</p><h3 id="4-3-信息传递流程"><a href="#4-3-信息传递流程" class="headerlink" title="4.3 信息传递流程"></a>4.3 信息传递流程</h3><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/信息传递.png" alt="图4.4信息传递图"></p><p>​    用户所持书籍内有RFID电子标签，图书终端设备中的读卡器会自动识别并读取RFID电子标签信息（最多可以同时识别50个电子标签），上传至云服务器中完成信息处理，并生成二维码订单，用户打开手机智慧图书馆移动APP扫描二维码完成订单确认，云服务器就会将用户信息和用户所借阅书籍信息统一管理起来，完成图书借阅。整个图书借阅和图书归还流程都无需人工干预，便于节省人工服务费用，使用机器管理，可以大大延长图书馆开馆时间，降低信息采集错误概率。以传感器、RFID 芯片、云服务器、后台智能管理端以及客户端设备之间的信息数据相互传递为基础，借此来完成实时、高效、快捷、一体化的图书借阅流程，让使用者倍感轻松。</p><p>(1)<strong>借阅图书流程</strong></p><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/借阅流程.png" alt="图4.5借阅泳道图" style="zoom: 12%;" /></p><p>​    用户在图书馆借阅图书也无需繁琐的操作（如 图3.5借阅流程图 ），仅需要将需要借阅的书籍，带到智慧图书馆设备端读卡器识别区内，读卡器会自动识别书籍中的RFID芯片并采集数据信息上传到云服务器中，同时生成二维码订单返回到设备终端显示器上，用户使用智慧图书馆移动应用扫描二维码，会提示用户完成图书信息订单确认，此后云服务器会将用户和书籍关联起来，录入数据库中，给出提示信息。</p><p>(2)<strong>归还图书流程</strong></p><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/归还流程.png" alt="图4.6归还流程" style="zoom:12%;" /></p><p>​    用户将待归还的图书通过智慧图书馆设备读卡区，读卡器会自动识别 RFID 信息，并在云服务器中记录图书归还信息，提示用户归还图书成功。</p><h3 id="4-4-云服务器"><a href="#4-4-云服务器" class="headerlink" title="4.4 云服务器"></a>4.4 云服务器</h3><h4 id="4-4-1-云应用架构"><a href="#4-4-1-云应用架构" class="headerlink" title="4.4.1 云应用架构"></a>4.4.1 云应用架构</h4><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/云组件图.png" alt="图4.7云组件图"></p><p>​    云服务器采用Java和SpringBoot框架构建RESTful风格应用编程接口，使用MVC的设计理念，组件化微服务开发，并为不同的应用编写不同的接口控制组件。采用统一登录注册，并对用户身份进行权限验证。图书修改组件、图书查询组件都继承于图书管理组件，且图书修改信息操作需要对管理员的权限进行验证，由图书管理组件连接对象存储系统进行图片管理。订单管理组件用于管理图书订单，每次借阅操作都会创建一个订单，一个订单可以有多本图书。设备管理组件主要用于记录和操作无人图书馆设备硬件端，为图书设备提供访问云数据库的接口。数据库访问组件采用MyBatis作为持久层框架用于访问关系型数据库MySQL，便于存储和管理应用和用户数据。日志组件采用文本日志，对每项关键操作、系统错误进行记录，为开发人员分析数据和恢复数据提供强有力的保障，提升了系统的容错率。</p><h4 id="4-4-2-数据库存储设计"><a href="#4-4-2-数据库存储设计" class="headerlink" title="4.4.2 数据库存储设计"></a>4.4.2 数据库存储设计</h4><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/数据库.png" alt="图4.8数据库存储设计图"></p><p>​    数据库采用目前最受欢迎的开源关系型数据库MySQL。为每个表信息存储建立唯一主键，以及有关联的表之间采用数据库外键进行关联，为以后数据维护提供保障。</p><h4 id="4-4-3-云服务器部署"><a href="#4-4-3-云服务器部署" class="headerlink" title="4.4.3 云服务器部署"></a>4.4.3 云服务器部署</h4><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/云部署图.png" alt="图4.9云部署图"></p><p>​    使用CDN分布式网站站点加速，用户进行请求时，会对用户IP进行解析，采用分布式系统架构和高性能缓存软件，并由最近的CDN服务器进行命中数据，若数据命中即可直接从静态资源库中将资源推向用户，这样将大大减少当个云服务器的流量负担，加快了访问速度，只有未命中的请求会由CDN服务器向源服务器进行请求，同时在流量闲置时会自动检查与源站的数据缓存同步。</p><p>​    智慧图书馆云服务器中采用Docker虚拟化技术，将应用封装到当个容器中，创建私有网桥，仅有互相连接的部分才能访问到网络。反向代理Nginx中的端口是对外界进行监听，再由反向代理进行流量进行分流，静态资源将直接从服务器高速磁盘中读取，应用接口请求会转发到无人图书馆云应用中，再由无人图书馆云应用进行权限校验，对数据库的存储取出，网络之间是互相隐匿的，只有暴露连接部分连通，大大提高了安全性。</p><h3 id="4-5-后台管理网页"><a href="#4-5-后台管理网页" class="headerlink" title="4.5 后台管理网页"></a>4.5 后台管理网页</h3><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/网页功能架构.png" alt="图4.10网页功能架构"></p><p>​    图书馆管理员通过后台管理端对图书馆进行管理，使用Vue前端框架进行页面渲染，后台管理端拥有权限验证用于验证管理员身份，首页控制面板可以对于图书馆的情况一目了然，日销售量，日访问量，支付笔数等等一览无余，使用图书管理模块可以通过图书ISBN号码进行快速添加图书，并为图书添加电子标签。借阅记录的管理，可以通过二维码反馈信息（其中包含借阅人员姓名，借阅时间，借阅书籍资料等）进行借阅记录的保存、排序、整理、检索等，并且能导出表格格式的电子文档，从而实现借阅记录的管理。日志查询可以对用户使用情况进行分析。<br>​    后台管理网页采用前后端分离的开发方式，采用MVVC设计思想，将视图层（View）、显示模型层（ViewModel）、控制层（Control）、模型层（Model）分层，显示层采用Vue框架采用前后端分离等技术实现，使用Webpack技术进行打包，仅需要与服务器请求少量数据，大大减少服务器负载，再由前端框架进行本地的页面渲染，路由切换等等，页面切换基本无延迟，拥有良好的用户体验。</p><h3 id="4-6-移动应用端"><a href="#4-6-移动应用端" class="headerlink" title="4.6 移动应用端"></a>4.6 移动应用端</h3><h4 id="4-6-1-信息关联"><a href="#4-6-1-信息关联" class="headerlink" title="4.6.1 信息关联"></a>4.6.1 信息关联</h4><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/移动应用.png" alt="图4.11移动应用" style="zoom: 20%;" /></p><p>​    智慧图书设备读取到图书中的RFID芯片信息后，服务器将会把书籍的信息与一个新创建的订单关联，并且生成一个包含订单信息的二维码，此时用户打开智慧图书馆移动应用，使用扫一扫功能，扫描订单二维码，然后会向云服务器发送用户的唯一标示信息，此时云服务器就会将用户和订单关联起来完成借阅。<br>​    移动应用端作为智慧图书馆的用户入口，其主要的功能是标示用户，将用户和所借阅的图书关联起来。</p><h4 id="4-6-2-生态圈"><a href="#4-6-2-生态圈" class="headerlink" title="4.6.2 生态圈"></a>4.6.2 生态圈</h4><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/移动应用生态.png" alt="图4.12移动应用生态" style="zoom:14%;" /></p><p>​    生态圈的建立对于应用来说是重中之重的，主要是通过用户参与各项活动，并且活动之间又互相关联。智慧图书馆生态社区主要是四大部分：图书推荐、图书借阅、读书心得分享、社区建设。用户使用智慧图书管理系统进行借阅后，可以在移动应用中分享自己的读书心得体会，并在社区中向大家分享，其他用户也同样参与讨论与分享，即可通过社区分享分析猜测用户可能喜爱的书籍，并向用户进行推荐图书，用户查阅到相关图书信息，就会有大概率进行再次借阅。</p><p>​    智慧图书馆的建设离不开用户的参与，移动应用作为智慧图书馆用户的入口，必定拥有较多的用户流量，通过建立智慧图书馆生态社区，更有利于增加用户粘性，使得更多的用户参与进来，从而达到良性循环。</p><h3 id="4-7-图书设备端"><a href="#4-7-图书设备端" class="headerlink" title="4.7 图书设备端"></a>4.7 图书设备端</h3><h4 id="4-7-1-设计方向"><a href="#4-7-1-设计方向" class="headerlink" title="4.7.1 设计方向"></a>4.7.1 设计方向</h4><p>​    智慧图书馆设备端是用于感知用户将要借阅的图书信息，同时将识别到的信息通过网络传递给云服务器，由云服务器进行订单的生成，并返回二维码信息，再由设备端进行显示，等待用户进行扫描二维码。</p><h4 id="4-7-2-功能架构"><a href="#4-7-2-功能架构" class="headerlink" title="4.7.2 功能架构"></a>4.7.2 功能架构</h4><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/设备端架构.png" alt="图4.13设备端架构"></p><p>(1)<strong>技术选型</strong></p><p>​    智慧图书馆设备端的主控选为树莓派3B，树莓派可以运行Linux系统，并有丰富的接口设计，4个USB接口、HDMI显示接口、40针GPIO控制针，非常利于进行嵌入式开发。</p><p>​    智慧图书馆设备应用使用Java进行开发，Java有非常好的跨平台特点，以及不错的执行速度，并且有丰富的社区支持。</p><p>​    用户界面采用网页的形式，使用Vue前端框架进行构建，可以利用网页就能轻松构建较为丰富的用户界面交互。</p><p>(2)<strong>信息传递流程</strong></p><p>​    由智慧图书馆设备应用中的标签信息中间件通过串口协议RS232与RFID标签读卡器进行数据通信。当有RFID电子标签在RFID标签读卡器的识别访问内时，将会源源不断的将标签信息传递到标签信息中间件，由中间件对这些信息进行过滤处理，将错误、重复的传输包进行丢弃。将多个的标签信息加入到消息队列中，并逐个上传到服务器中创建订单，服务器返回订单二维码信息，再由WebSocket通信向前端进行消息发送，前端再进行页面的刷新渲染。</p><h2 id="5-成果展示"><a href="#5-成果展示" class="headerlink" title="5 成果展示"></a>5 成果展示</h2><h3 id="5-1-设备端"><a href="#5-1-设备端" class="headerlink" title="5.1 设备端"></a>5.1 设备端</h3><div class="gallery ">              <p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/设备图片1.png" alt="设备图片1"></p><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/设备图片2-20200628164552713.png" alt="设备图片2"></p><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/pc3.png" alt="设备图片3"></p>            </div><h3 id="5-2-后台管理"><a href="#5-2-后台管理" class="headerlink" title="5.2 后台管理"></a>5.2 后台管理</h3><div class="gallery ">              <p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/dashborad.png" alt="dashborad"></p><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/书籍管理.png" alt="书籍管理"></p>            </div><h3 id="5-3-手机端"><a href="#5-3-手机端" class="headerlink" title="5.3 手机端"></a>5.3 手机端</h3><div class="gallery ">              <p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/035B06EE32F3EDC4FDFD494952571E58.png" alt="035B06EE32F3EDC4FDFD494952571E58"></p><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/推荐书单.png" alt="推荐书单"></p><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/A1350221DAD4D963DD9E70BA202A732F.png" alt="A1350221DAD4D963DD9E70BA202A732F"></p><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/F5ECEC472AD929C075EB7A7BC928657A.png" alt="F5ECEC472AD929C075EB7A7BC928657A"></p><p><img src="https://cdn.jsdelivr.net/gh/sbtobb/CDN/blog/FC23E12B3E3ACCBCFDC7BDD61FB84645.png" alt="FC23E12B3E3ACCBCFDC7BDD61FB84645"></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 研究项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无人图书馆 </tag>
            
            <tag> RFID </tag>
            
            <tag> 物联网 </tag>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
